<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>heroSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State Variables

// State, Health, Mana
// Variables
hp = 100; // Health of Hero; if &lt;= 0, die
mp = 100; // Mana of Hero; used for spells, special abilities
state = "alive"; // State of Hero; if hp &lt;= 0, = "dead"
// Reference

// Controls
// Variables
// Reference
upKey = false; // Step:Controls
downKey = false; // Step:Controls
leftKey = false; // Step:Controls
rightKey = false; // Step:Controls
hAxis = 0; // Step:Controls
vAxis = 0; // Step:Controls
hLookAxis = 0; // Step:Controls
vLookAxis = 0; // Step:Controls
useKey = false; // Step:Controls
attackKey = false; // Step:Controls
blockKey = false; // Step:Controls
specialKeyRight = false; // Step:Controls
specialKeyLeft = false; // Step:Controls

// Movement
// Variables
moveSpeed = 2.4; // Base speed of Hero; vary until comfortable
// Reference
hsp = 0; // Step:Movement
vsp = 0; // Step:Movement
hValue = 0; // Step:Movement
vValue = 0; // Step:Movement

// Aiming
// Variables
turnSpeed = 15; // Set the speed of turning with right stick
// Reference
rAxisDirection = 0; // Step:Set Variables
rAxisTotal = 0; // Step:Set Variables
rAxisSpeed = 0; // Step:Set Variables
rAxisSpeedMax = 0; // Step:Set Variables
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inventory

// Initialize Map
inv = ds_map_create(); // Initialize inventory map
/**
 * Using ds_map_add(inv, category, item)
 * you can add an item to the Hero's inventory.
 * Categories (in the format: Name (Description)):
 *     con (consumable, like potions)
 *     wep (weapon)
 *     shl (shield)
 *     arm (armor)
 *     key (key items)
 */
 
// Money
// Even though it isn't part of the inv map, I felt like it belongs here
coins = 0; // Money of Hero; used in the shop

// Initial Equipment
ds_map_add(inv, "wep", woodSword); // Adds Wooden Sword at start of game
ds_map_add(inv, "shl", woodShield); // Adds Wooden Shield at start of game
ds_map_add(inv, "arm", leatherArmor); // Adds Leather Armor at start of game
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Variables

// Right Stick
rAxisDirection = point_direction(0, 0, vLookAxis, hLookAxis) + 90; // Takes axis output and returns a direction
rAxisTotal = hLookAxis + vLookAxis; // Sum of horizontal and vertical stick movement; 0-1
rAxisSpeed = mean(abs(hLookAxis), abs(vLookAxis)); // Current Turn Speed
rAxisSpeedMax = max(abs(hLookAxis), abs(vLookAxis)); // Max Turn Speed

// Depth
depth = y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls

// Movement
// Keys and D-Pad
upKey = -keyboard_check(ord('W')) + -gamepad_button_check(0, gp_padu); // Upward movement
downKey = keyboard_check(ord('S')) + gamepad_button_check(0, gp_padd); // Downward movement
leftKey = -keyboard_check(ord('A')) + -gamepad_button_check(0, gp_padl); // Left movement
rightKey = keyboard_check(ord('D')) + gamepad_button_check(0, gp_padr); // Right movement

// Left Stick
hAxis = gamepad_axis_value(0, gp_axislh); // Horizontal left-stick movement
vAxis = gamepad_axis_value(0, gp_axislv); // Vertical left-stick movement

// Right Stick
hLookAxis = gamepad_axis_value(0, gp_axisrh); // Horizontal Aiming
vLookAxis = -gamepad_axis_value(0, gp_axisrv); // Vertical Aiming

// Attacking, Speaking, Selection
useKey = keyboard_check_pressed(ord('K')) + gamepad_button_check_pressed(0, gp_face1); //Selection key
attackKey = keyboard_check_pressed(ord('L')) + gamepad_button_check_pressed(0, gp_shoulderr); // Attack key
blockKey = keyboard_check(ord(';')) + gamepad_button_check(0, gp_shoulderl); // Block key
specialKeyRight = keyboard_check_pressed(ord('P')) + gamepad_button_check_pressed(0, gp_shoulderrb); // Right-trigger special attack
specialKeyLeft = keyboard_check_pressed(ord('O')) + gamepad_button_check_pressed(0, gp_shoulderlb); // Left-trigger special attack
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

// Set Direction
// Horizontal Movement
hValue = rightKey + leftKey; // Booleans return 1 or 0; if both, gives 0
if(abs(hAxis) &gt; 0.2) hValue = hAxis; // Hard-sets horizontal deadzone and allows left-stick for movement
if(hValue &gt; 1) hValue = 1; // hValue goes no higher than 1
else if(hValue &lt; -1) hValue = -1; // hValue goes no lower than -1

// Vertical Movement
vValue = upKey + downKey; // Booleans return 1 or 0; if both, gives 0
if(abs(vAxis) &gt; 0.2) vValue = vAxis; // Hard-sets vertical deadzone and allows left-stick vertical movememt
if(vValue &gt; 1) vValue = 1; // vValue goes no higher than 1
else if(vValue &lt; -1) vValue = -1; // vValue goes no lower than -1

// Set Speeds
hsp = hValue * moveSpeed; // Set horizontal speed
vsp = vValue * moveSpeed; // Set vertical speed

// Collision Detection and Correction
if(place_meeting(x+hsp, y, wallObj)) { // Horizontal Check
    while(!place_meeting(x+sign(hsp), y, wallObj)) x += sign(hsp); // If close to wall but not against it, move until against it
    hsp = 0; // If against wall, stop moving
} // end if line21
if(place_meeting(x, y+vsp, wallObj)) { // Vertical Check
    while(!place_meeting(x, y+sign(vsp), wallObj)) y += sign(vsp); // If close to wall but not against it, move until against it
    vsp = 0; // If against wall, stop moving
} // end if line25

// Move Hero
x += hsp; // Moves Hero in set speed and direction horizontally
y += vsp; // Moves Hero in set speed and direction vertically
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Aiming

// Right Stick Turning
if(abs(hLookAxis) &gt; 0.3 || abs(vLookAxis) &gt; 0.3) { // If trying to turn; set deadzones
    angleDifference = angle_difference(rAxisDirection, hero.image_angle); // Set difference between current facing and target facing
    if(angleDifference != 0) { // If Hero can turn
        //turning = true;
        turnRate = turnSpeed * rAxisSpeed; // Set rate of turning
        hero.image_angle += median(-turnRate, angleDifference, turnRate); // Change Hero aim angle
        if(abs(hero.image_angle) &gt;= 360) { // Don't let angle go over 359
            hero.image_angle = 0;
        } // end if line10
    } // end if line6
} // end if line4
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Test Shooting

// Throw Sword
if(attackKey) {
    instance_create(x, y, testProjectile);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="explosionMiniObj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp -= 35;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="explosionObj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp -= 25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug

draw_self();
draw_set_color(c_black);
// Display Debug Text
// Movement Axes
draw_text(view_xview[0]+10, view_yview[0]+10, 
          "hAxis: " + string(hAxis));
draw_text(view_xview[0]+10, view_yview[0]+20, 
          "vAxis: " + string(hAxis));
// Aiming Axes
draw_text(view_xview[0]+10, view_yview[0]+30, 
          "hLookAxis: " + string(hLookAxis));
draw_text(view_xview[0]+10, view_yview[0]+40, 
          "vLookAxis: " + string(vLookAxis));
// Stats
draw_text(view_xview[0]+10, view_yview[0]+50, 
          "hp: " + string(hp));
draw_text(view_xview[0]+10, view_yview[0]+60, 
          "mp: " + string(mp));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
